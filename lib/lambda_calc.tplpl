
# An example of a lambda calculus interpreter. This shows that TPLPL is turing
# complete. Here we use de Bruijn indices for variables.
#
# Term := var(Index)
#       | lambda(Term)
#       | ap(Term, Term)
#
# Index = z | s(Index)

eval(lambda(?X), lambda(?Y)) :- eval(?X, ?Y).
eval(ap(lambda(?X), ?Y), ?Z) :- subst(?X, ?Y, ?T), eval(?T, ?Z).
eval(?X, ?X).

subst(?X, ?Y, ?Z) :- subst(?X, ?Y, ?Z, z).
subst(var(?N), ?Y, ?Y, ?N).
subst(var(s(?N)), ?X, s(?N), ?DEPTH) :- lessThan(s(?N), ?DEPTH).
subst(var(s(?N)), ?X, ?N, ?DEPTH) :- lessThan(?DEPTH, s(?N)).
subst(var(s(?N)), ?X, ?N, ?DEPTH) :- eq(s(?N), ?DEPTH).
subst(lambda(?X), ?Y, lambda(?Z), ?DEPTH) :- subst(?X, ?Y, ?Z, s(?DEPTH)).
subst(ap(?X1, ?Y1), ?Z, ap(?X2, ?Y2), ?DEPTH) :- subst(?X1, ?Z, ?X2, ?DEPTH), subst(?Y1, ?Z, ?Y2, ?DEPTH).


# A simple test of applications.
test1(?X) :- eval(ap(lambda(ap(var(z), var(z))), lambda(var(z))), ?X).
